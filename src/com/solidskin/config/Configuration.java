package com.solidskin.config;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.Calendar;
import java.util.Locale;
import java.util.Properties;
import java.util.TimeZone;


public final class Configuration extends AbstractConfiguration {
	
	public static Configuration conf;

	private TimeZone timeZone = null;

	private Locale locale = null;

	/** ï¿½Ê±ï¿½È­ ï¿½ï¿½ï¿½ï¿½ */
	private static boolean init = false;

	/** ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿? */
	private static String configFilePath;

	/**
	 * @param configPath
	 *            ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿?
	 */
	public synchronized static void init(String configPath) {
		if (init) {
			throw new RuntimeException("ï¿½Ì¹ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½Ê±ï¿½È­ï¿½ï¿½ ï¿½Ç¾ï¿½ ï¿½Ö½ï¿½ï¿½Ï´ï¿½.");
		}
		configFilePath = configPath;

		conf = new Configuration();
		
		init = true;
	}

	/**
	 * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	 */
	protected Configuration() throws RuntimeException {
		try {
			initialize();
		} catch (ConfigurationException ce) {
			System.err.println("CAN'T INITIALIZE GLOBAL CONFIGURATION.");
			ce.printStackTrace(System.err);
			throw new RuntimeException(ce);
		}
	}

	/**
	 * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ¼ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	 */
	private synchronized void initialize() throws ConfigurationException {
		// ï¿½Ê±ï¿½ ï¿½ï¿½Ã¼ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿? ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿? ï¿½ï¿½Ã¼ ï¿½ï¿½ï¿½ï¿½
		if (props == null) {
			String path = configFilePath;
			if (path == null) {
				throw new NullPointerException(
						"setConfigFilePath(String)ï¿½ï¿½ ï¿½Ì¿ï¿½ï¿½Ï¿ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½Î¸ï¿? ï¿½ï¿½ï¿½ï¿½ï¿½Ï¼ï¿½ï¿½ï¿½ ");
			}
			File f = new File(path);
			if (!f.exists() || !f.isFile() || !f.canRead()) {
				String mesg = this.getClass().getName()
						+ " - Can't open jdf configuration file: " + path;
				throw new ConfigurationException(mesg);
			}

			Properties p = null;
			try {
				p = new Properties();
				InputStream i = new BufferedInputStream(new FileInputStream(f));
				p.load(i);
				i.close();
				AbstractConfiguration.lastModified = f.lastModified();
			} catch (Exception e) {
				AbstractConfiguration.lastModified = 0;
				String mesg = this.getClass().getName()
						+ " - Can't load configuration file. (Exception: "
						+ e.getClass().getName() + ", Message: "
						+ e.getMessage();
				throw new ConfigurationException(mesg);
			}

			props = p;
		} // end if
	}

	/**
	 * È¯ï¿½æ¼³ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ï°ï¿½ ï¿½Ã°ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Þ·Â°ï¿½Ã¼ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ñ´ï¿½.
	 * 
	 * @return È¯ï¿½æ¼³ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ö¾ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ï°ï¿½ ï¿½Ã°ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ï´ï¿½ ï¿½Þ·ï¿½ ï¿½ï¿½Ã¼
	 * @see #getDefaultLocale()
	 * @see #getDefaultTimeZone()
	 */
	public Calendar createDefaultCalendar() {
		return Calendar.getInstance(getDefaultTimeZone(), getDefaultLocale());
	}

	/**
	 * È¯ï¿½æ¼³ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ã°ï¿½ï¿½ï¿½ ï¿½Úµå¸¦ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ã°ï¿½ï¿½ï¿½ ï¿½ï¿½Ã¼ï¿½ï¿½ ï¿½ï¿½Â´ï¿?. ï¿½ï¿½ï¿½Ç´ï¿½ ï¿½Ã°ï¿½ï¿½ï¿½ ï¿½Úµï¿½ï¿? JRE 1.4 È¯ï¿½æ¿¡ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ç´ï¿½ Ç¥ï¿½ï¿½
	 * ï¿½Ú¹ï¿½ ï¿½Úµå°ªï¿½Ì´ï¿½.
	 * 
	 * @return È¯ï¿½æ¼³ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ï´ï¿½ ï¿½Ã°ï¿½ï¿½ï¿½(TimeZone) ï¿½ï¿½Ã¼
	 */
	public TimeZone getDefaultTimeZone() {
		if (timeZone == null) {
			String tzName = super.getString("TIMEZONE", "Asia/Seoul");
			timeZone = TimeZone.getTimeZone(tzName);
		}
		return timeZone;
	}

	/**
	 * È¯ï¿½æ¼³ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Úµå¸¦ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½Ã¼ï¿½ï¿½ ï¿½ï¿½Â´ï¿?.
	 * 
	 * <p>
	 * È¯ï¿½æ¼³ï¿½ï¿½ ï¿½×¸ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½Úµï¿½ï¿½ "LANGUAGE" ï¿½Ó¼ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ç´ï¿½ ISO-639 ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ø¼ï¿½ï¿½Ï´ï¿½ ï¿½ï¿½ï¿½ï¿½ 2ï¿½Ú¸ï¿½ ï¿½Úµå°ªï¿½Ì¸ï¿½, ï¿½ï¿½ï¿½ï¿½ï¿½Úµï¿½ï¿?
	 * "COUNTRY" ï¿½Ó¼ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ç´ï¿½ ISO-3166 ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ø¼ï¿½ï¿½Ï´ï¿½ ï¿½ï¿½ï¿½ï¿½ 2ï¿½Ú¸ï¿½ ï¿½Úµå°ªï¿½Ì´ï¿½.
	 * </p>
	 * <p>
	 * ï¿½âº» ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿? ï¿½Úµï¿½ï¿? "ko", ï¿½ï¿½ï¿½ï¿½ ï¿½Úµï¿½ï¿? "KR"ï¿½Ì´ï¿½.
	 * </p>
	 * 
	 * @return È¯ï¿½æ¼³ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ï´ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½Ã¼
	 */
	public Locale getDefaultLocale() {
		if (locale == null) {
			String lcLang = super.getString("LANGUAGE", "ko");
			String lcCountry = super.getString("COUNTRY", "KR");
			locale = new Locale(lcLang, lcCountry);
		}
		return locale;
	}
}
